#!/usr/bin/env bash
#
# Copyright © 2023 Revolution Robotics, Inc.
#
# @(#) pgadmin-installer
#
# This script installs a local pgAdmin4 server together with GNU/Linux
# desktop suport in two stages: bootstrap and install. The bootstrap
# stage identifies where Python installs packages. The install stage
# prompts the user for credentials to encrypt saved passwords, then
# the pgAdmin4 (SQLite) database is updated accordingly.
#
# The files installed for GNU/Linux desktop support include:
#
#     • pgAdmin4 config_local.py (setting: DATA_DIR=~/.pgadmin),
#     • systemd unit file ${HOME}/.config/systemd/user/pgadmin.service,
#     • XDG desktop entry ${HOME}/.local/share/applications/pgadmin.desktop, and
#     • command-line script ${HOME}/bin/pgadmin-ctl.
#
# The pgadmin-ctl utility is called by pgadmin.desktop to start the
# pgAdmin4 service and open in the web browser the pgAdmin4 URL (by
# default, http://localhost:5050). To stop the pgAdmin4 service, run:
#
#    $ pgadmin-ctl stop
#
# To remove the pgAdmin4 service and associated files, run:
#
#     $ ./pgadmin-installer uninstall
#
: ${AWK_CMD:='@AWK_CMD@'}
: ${CAT_CMD:='@CAT_CMD@'}
: ${CHMOD_CMD:='@CHMOD_CMD@'}
: ${GREP_CMD:='@GREP_CMD@'}
: ${INSTALL_CMD:='@INSTALL_CMD@'}
: ${JQ_CMD:='@JQ_CMD@'}
: ${KILL_CMD:='@KILL_CMD@'}
: ${LN_CMD:='@LN_CMD@'}
: ${PIP_CMD:='@PIP_CMD@'}
: ${READLINK_CMD:='@READLINK_CMD@'}
: ${RM_CMD:='@RM_CMD@'}
: ${SED_CMD:='@SED_CMD@'}
: ${STAT_CMD:='@STAT_CMD@'}
: ${SLEEP_CMD:='@SLEEP_CMD@'}
: ${SYSTEMCTL_CMD:='@SYSTEMCTL_CMD@'}
: ${TAIL_CMD:='@TAIL_CMD@'}
: ${UPDATE_DB_CMD:='@UPDATE_DB_CMD@'}

: ${ASDF_SHIMS_PATH:='@ASDF_SHIMS_PATH@'}

resolve-existing ()
{
    if $READLINK_CMD --version 2>&1 | $GREP_CMD -q 'GNU'; then
        $READLINK_CMD -e "$@"
    else
        $READLINK_CMD -f N "$@"
    fi
}

get-file-size ()
{
    if $STAT_CMD --version 2>&1 | $GREP_CMD -q 'GNU'; then
        $STAT_CMD -c '%s' "$@"
    else
        $STAT_CMD -f '%z' "$@"
    fi
}

maybe-reshim-python ()
{
    local pip_dir=$1

    if test ."$pip_dir" = ."$ASDF_SHIMS_PATH"; then
        echo "${script_name}: reshimming python" >&2
        source "${ASDF_SHIMS_PATH}/../asdf.sh"
        asdf reshim python
    fi
}

get-data-dir ()
{
    local pgadmin_package_dir=$1

    local -a config_list=()

    for suffix in '' _distro _local; do
        if test -f "${pgadmin_package_dir}/config${suffix}.py"; then
            config_list+=( "${pgadmin_package_dir}/config${suffix}.py" )
        fi
    done

    local pg_data_dir=''

    pg_data_dir=$(
        $CAT_CMD "${config_list[@]}" |
            $AWK_CMD -F\' '/^[[:space:]]*DATA_DIR/ { print  $2 }' |
            $TAIL_CMD -1
               ) || return $?

    eval echo "$pg_data_dir"
}

deploy-packages ()
{
    local -n pkgs=$1

    $PIP_CMD install --upgrade --no-input "${pkgs[@]}"
    maybe-reshim-python ${PIP_CMD%/*}
}

remove-packages ()
{
    local -n pkgs=$1

    $PIP_CMD uninstall --yes "${pkgs[@]}"
    maybe-reshim-python ${PIP_CMD%/*}
}

get-pgadmin-path ()
{
    local pgadmin_path=''

    while ! pgadmin_path=$(command -v pgadmin4); do
        if test -x "${HOME}/.local/bin/pgadmin4"; then
           export PATH=${HOME}/.local/bin:${PATH}

           # Upgrade pip and pyopenssl (see: https://stackoverflow.com/a/74443414).
           $PIP_CMD install -U pip >&2
           ${HOME}/.local/bin/pip install -U pip >&2
           ${HOME}/.local/bin/pip install -U pyopenssl >&2
        else
            echo "${script_name}: pgadmin4: No such file or directory" >&2
            return 1
        fi
    done

    echo $pgadmin_path
}

get-pgadmin-package-dir ()
{
    pgadmin_metadata_dir=$(
        $PIP_CMD  inspect  |
            $JQ_CMD -r '.installed[] |
                        select(.metadata.name == "pgadmin4") |
                        .metadata_location'
                         ) || return $?
    echo "${pgadmin_metadata_dir%/*}/pgadmin4"
}

deploy-resources ()
{
    local -n resources=$1

    local file=''
    local directory=''
    local perms=''
    local pgadmin_path=''
    local pgadmin_package_dir=''

    pgadmin_path=$(get-pgadmin-path) || return $?
    pgadmin_package_dir=$(get-pgadmin-package-dir) || return $?
    $LN_CMD -sf pgAdmin4.py "${pgadmin_package_dir}/pgadmin4.py"
    $LN_CMD -sf pgAdmin4.wsgi "${pgadmin_package_dir}/pgadmin4.wsgi"

    printf "%s\n" "${resources[@]}" |
        while read file directory; do
            directory=${directory/@PGADMIN_PACKAGE_DIR@/$pgadmin_package_dir}
            $INSTALL_CMD -d -m 0700 "$directory"
            $SED_CMD -e "s;@PGADMIN4_CMD@;${pgadmin_path};" \
                     -e "s;@PYTHON_SITE_PACKAGES_DIR@;${pgadmin_package_dir%/*};" \
                     -e "s;@PGADMIN_PACKAGE_DIR@;${pgadmin_package_dir};" \
                     -e "s;@HOME_BIN@;${HOME}/bin;" \
                     "$file" >"${directory}/${file##*/}" \
                || return $?
            if [[ ."$directory" =~ ^\..*/bin/?$ ]]; then
                perms=u+rwx,go-rwx
            else
                perms=u+rw,a-x,go-rw
            fi

            $CHMOD_CMD "$perms" "${directory}/${file##*/}"
        done || return $?

    $SYSTEMCTL_CMD --user daemon-reload

    echo "$pgadmin_package_dir"
}

remove-resources ()
{
    local -n resources=$1

    local file=''
    local directory=''

    printf "%s\n" "${resources[@]}" |
        while read file directory; do
            $RM_CMD -f "${directory}/${file##*/}"
        done || return $?

    $SYSTEMCTL_CMD --user daemon-reload
}

get-and-export-credentials ()
{
    local email_address=''
    local password=''
    local password_conformation=''
    local normalize_email=${script_dir}/resources/normalize-email

    printf 'NOTE: Configuring authentication for SERVER mode.\n\n'
    printf 'Enter the email address and password to use for the initial pgAdmin user account:\n\n'
    read -p 'Email address: ' email_address

    while ! email_address=$($normalize_email "$email_address"); do
        printf 'Invalid email address. Please try again.\n'
        read -p 'Email address: ' email_address
    done

    read -s -p 'Password: ' password
    read -s -p $'\nRetype password:' password_confirmation

    while test ."$password" != ."$password_confirmation"; do
        printf '\nPasswords do not match. Please try again.\n'
        read -s -p 'Password:' password
        read -s -p $'\nRetype password:' password_confirmation
    done

    export PGADMIN_SETUP_EMAIL=$email_address \
           PGADMIN_SETUP_PASSWORD=$password
}

settle-pg-database ()
{
    local pg_data_dir=$1

    local pg_database=${pg_data_dir}/pgadmin4.db
    local pid=''

    printf '\nUpdating pgAdmin4 database, please wait...'

    # pgadmin4 writes to tty.  TODO: log to file.
    pgadmin4 &>/dev/null &
    pid=$!

    trap '$KILL_CMD -9 "$pid"; $RM_CMD -rf "$pg_data_dir"; exit 1' 0 1 2 15 RETURN

    while test ! -f "$pg_database"; do
        $SLEEP_CMD 1
    done

    local -i current_size=0
    local -i previous_size=0
    local -i update_seconds=5

    current_size=$(get-file-size "$pg_database") || return $?
    while (( current_size != previous_size )); do
        (( previous_size = current_size ))
        $SLEEP_CMD "$update_seconds"
        current_size=$(get-file-size "$pg_database") || return $?
    done

    trap - 0 1 2 15 RETURN

    $SLEEP_CMD "$update_seconds"
    $KILL_CMD -1 "$pid"
    printf '\n'
    $SLEEP_CMD $(( 2 * update_seconds ))
}

initialize-service ()
{
    local pgadmin_package_dir=$1

    local pg_data_dir=''

    pg_data_dir=$(get-data-dir "$pgadmin_package_dir") || return $?

    if test ! -d "$pg_data_dir"; then
        if command -v pgadmin4 >/dev/null; then
            get-and-export-credentials || return $?
            settle-pg-database "$pg_data_dir" || return $?
        else
            cat <<EOF
╒════════════════════════════════════════════════════════════════════════╕
│                                                                        │
│ Update the PATH as indicated below, then run the command:              │
│                                                                        │
│     pgadmin4                                                           │
│                                                                        │
│ and enter youur credentials when prompted. Once the server has         │
│ started, press <CTRL> + C to exit, and use the pgAdmin Desktop app     │
│ thereafter.                                                            │
│                                                                        │
╘════════════════════════════════════════════════════════════════════════╛
EOF
        fi
    fi
 }

stop-service ()
{
    local service=$1

    if $SYSTEMCTL_CMD --user is-active "$service" >/dev/null; then
        $SYSTEMCTL_CMD --user stop "$service"
    fi
}

enable-service ()
{
    local service=$1

    if ! $SYSTEMCTL_CMD --user is-enabled "$service" >/dev/null; then
        $SYSTEMCTL_CMD --user enable --now "$service"
    fi
}

disable-service ()
{
    local service=$1

    if $SYSTEMCTL_CMD --user is-enabled "$service" >/dev/null; then
        $SYSTEMCTL_CMD --user disable --now "$service"
    fi
}

complete-installation ()
{
    local header='╒════════════════════════════════════════════════════════════════════════╕
│                                                                        │'
    local success='│              pgAdmin installation completed successfully!              │'
    local update_path="│ To complete the pgAdmin installation, please update the PATH           │
│ variable in your shell's initialization scripts (e.g., ~/.bashrc       │
│ and ~/.bash_profile or ~/.zshrc and ~/.zprofile) with:                 │
│                                                                        │
│     export PATH+=:~/.local/bin:~/bin                                   │"
    local logout='│                                                                        │
│ To make the Desktop aware of the new pgAdmin app, it might be          │
│ necessary to log out and back in again.                                │'
    local footer='│                                                                        │
╘════════════════════════════════════════════════════════════════════════╛'

    if test -x "$UPDATE_DB_CMD"; then
        $UPDATE_DB_CMD "${HOME}/.local/share/applications/"
    fi

    echo "$header"
    if command -v pgadmin4 >/dev/null; then
        echo "$success"
    else
        echo "$update_path"
        echo "$logout"
    fi
    echo "$footer"
}

if test ."$0" = ."${BASH_SOURCE[0]}"; then
    set -o pipefail

    declare script=$(resolve-existing "$0")
    declare script_name=${script##*/}
    declare script_dir=${script%/*}

    declare resources_dir=${script_dir}/resources
    declare -a pgadmin_resources=(
        "${resources_dir}/config_local.py @PGADMIN_PACKAGE_DIR@"
        "${resources_dir}/pgadmin.desktop ${HOME}/.local/share/applications"
        "${resources_dir}/gunicorn@.service ${HOME}/.config/systemd/user"
        "${resources_dir}/pgadmin-ctl ${HOME}/bin"
    )

    declare service=gunicorn@pgadmin4.service
    declare -a wheels=( pgadmin4 simple-websocket gunicorn email-validator )
    declare pgadmin_package_dir=''

    case "$1" in
        i*)
            stop-service "$service" || exit $?
            deploy-packages wheels || exit $?
            pgadmin_package_dir=$(deploy-resources pgadmin_resources) || exit $?
            initialize-service "$pgadmin_package_dir" || exit $?
            enable-service "$service" || exit $?
            complete-installation || exit $?
            ;;
        u*)
            disable-service "$service" || exit $?
            remove-resources pgadmin_resources || exit $?
            remove-packages wheels || exit $?
            ;;
        r*)
            pgadmin_package_dir=$(get-pgadmin-package-dir) || exit $?
            initialize-service "$pgadmin_package_dir" || exit $?
            enable-service "$service" || exit $?
            ;;
        *)
            echo "Usage: ${script_name} install|uninstall|reinitialize" >&2
            ;;
    esac
fi
